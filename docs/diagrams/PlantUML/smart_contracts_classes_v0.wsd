@startuml "smart contracts classes"


' class OrderManagementSystem   as "Контракт: Система Управления Заказами"  {} 
' class OrderManagementSystem  << (C, Orchid) php >> {} 
class OrderManagementSystem  << (C, Orchid) Contract >>  {} 

class OrderManagementSystemUpgradable << (C, Orchid) Contract >> {
    -- storage data --
    - owner : address
    + version : uint
    - orderManagementSystemContract : address
    -- modifiers --
    # modifier onlyOwner()
    -- сontract access control methods --
    + address getContractAddress()
    + void updateContractAddress()
    # uint _incrementCounter()
}


class AccessControlManager << (C, Orchid) Contract >> {
    -- constants --
    + OWNER_ROLE : bytes32
    + ADMIN_ROLE : bytes32
    + ORACLE_ROLE : bytes32
    + MANUFACTURER_ROLE : bytes32
    + SUPPLIER_ROLE : bytes32
    + MAINTAINER_ROLE : bytes32
    + TRANSPORTER_ROLE : bytes32
    + BUYER_ROLE : bytes32
    -- storage data --
    - users : mapping
    userIdCounter : uint
    -- modifiers --
    modifier onlyRole(bytes32)
    modifier onlyMerchants
    modifier onlySalesBusinessProcessRole
    -- сontract access control methods --
    + void revokeRole(bytes32, address)
    + void renounceRole(bytes32, address)
    # void _setRoleAdmin(bytes32, bytes32)
    # void _grantRole(bytes32, address)
    + void grantRole(bytes32, address)
    -- business process methods --
    + void createUser(address, string, string, bytes32)
    + void addBuyer() onlyRole(SUPPLIER_ROLE)
    # uint[] _getUserInventoryByUserId(uint)
    + uint[] getUserInventoryByUserId(uint)
    + uint getUsersCount(uint)
    + User getUserById(uint)
    + uint getUserIdByAddress(address)
    # User _getUserById(uint256)
    # uint _getUserByAddress(address)
    + User getUserByAddress(address)
    + User[] exportUsers() onlyRole(OWNER_ROLE)
    # uint _checkProductInInventory(uint, uint)
    # uint _removeProductFromInventory(uint, uint)
    # uint _addProductToInventory(uint, uint)
}

class OrdersManager << (C, Orchid) Contract >> {
    -- storage --
    - orders : mapping
    productIdCounter : uint
    -- events --
    event CreatedOrder
    event ProductWasAddedToOrder
    event ParticipantSetOrderStatus
    -- modifiers --
    modifier onlyOrderParticipants(uint)
    modifier onlyUnconfirmedOrders(uint)
    modifier onlyUntransferredProductsInOrders(uint)
    -- business process methods --
    # Order _getOrderById(uint)
    + Order getOrderById(uint)
    + Order exportOrders() onlyRole(OWNER_ROLE)
    + void createOrder(address, address, string, string)
    + void removeOrderById(uint)
    + void addProductToOrderById(uint, uint)
    # void _checkProductInOrderProductList(ProductInOrder[], uint)
    + void removeProductFromOrderById(uint, uint)
    # void _removeProductFromOrderById(ProductInOrder[], uint)
    # void _removeProductFromOrderByIdProductList(ProductInOrder[], uint)
    # void _transferProductsInOrder(uint, bool)
    + void updateOrderStateById(ProductInOrder[], uint, uint)
}

class ProductsManager << (C, Orchid) Contract >> {
    -- storage --
    - products: mapping
    - productIdCounter: uint
    -- events --
    event ProductWasProduced
    event ProductWasDeleted
    event UpdatedProductState
    event ProductWasCompromised
    event ProductIsRestored
    event TransferedOwnership
    -- modifiers --
    modifier onlyRolesMatchingToStates(uint)
    modifier onlyProductInInventory(uint)
    -- business process methods --
    + State getProductById(uint)
    + void getProductState(uint)
    + bool checkLegalityProductToTransferOrSale(uint)
    # uint _getProductIndexInUserInventory(uint, uint)
    + produceNewProduct(uint, uint, string, bytes32, uint)
    # void _addProductToInventory(uint, uint)
    + void removeProduct(uint, string)
    # void _removeProductFromInventory(uint, uint)
    + void restoreProduct(uint, string)
    + void unlockProductOwnership(uint, string)
    # void _resetOwnership(uint, string)
    # Product _getProductInStorageById(uint)
    + void sellProduct(uint, uint, string)
    + void addShippingEvent(uint, uint, string)
    + void transferProductOwnership(uint, uint, uint)
    + void updateProductState(uint, uint, uint, string)
}



OrderManagementSystemUpgradable ..> OrderManagementSystem
OrderManagementSystem <|-- AccessControlManager
OrderManagementSystem <|-- MaintenanceManager
OrderManagementSystem <|-- OrdersManager
OrderManagementSystem <|-- ProductsManager

MaintenanceManager <|-- AccessControlManager
OrdersManager <|-- AccessControlManager
ProductsManager <|-- AccessControlManager





@enduml